Code
	Compiler:
		(test) 0. LValue check (symbol table - create symbols only on assignment!)
		(test) 0. Ref of non-existent symbols!
	Reg - Emulator
		1. breakpoint / trace in emulator
	Compiler:
		2. test actual compile -> asm -> emulate code - get output
	Microcode
	 ** 0. The Microcode Slices and .pdf stuff
			0. Generate the Micrococe Handout
		1. microcode-emulator











1. Sylly Bus

3. Lectures

wk1:

	01 - Syllabus
		1. Decent likelihood that I will end up traveling during the semester.  If so there will
		   be pre-recorded video lectures.
	02 - Basics of a Computer : Compare : History
	03 - Number systems
		1. History
		2. Math and Number systems
		3. Binary
		4. Correspondence to hardware
		5. Conversion
		6. Octal / Hex 
		7. Other Representations
		** Homework 1 assigned ** - Conversion of Numbers / Representation
		Generally - homework will be assigned on a Friday - due 1 week later.  Most homework are 200pts.

wk2:

	04 - More on number systems
		1. Hex and EIP-55 encoding
		2. Non-baseX systems
		3. Signed Integers
		4. Character Codes
	05 - Text Representations
		1. ASCII
		2. Unicode
		3. Fonts and gliffs
	06 - Limits on what computers can do - Turning Complete
		1. Error correction systems
		2. 
		** Homework 1 due at Midnight ** 
		** Homework 2 assigned ** - Signed numbers, Our Hello World in Assembler.

wk3:
	07 - Boolean Algebra
		- How it works
		- Why it is important
		- Proofs
	08 -
	09 -
		** Homework 2 due at Midnight ** 
		** Homework 3 assigned ** - Boolean Proofs / Gate Diagrams

wk4:
	10 - MARIA - the machine we are going to use
	11 - Instructions
	12 - Conversion of code to Assembly (by hand)
		** Homework 3 due at Midnight ** 
		** Homework 4 assigned ** - Convert some C code to assembly and run and test.

wk5:
	13 - Implementing our own emulator
	14 -
	15 -
		** Homework 4 due at Midnight ** 
		** Homework 5 assigned ** - Implement our own MARIA emulator in C/C++/Go/Python.

wk6:
	16 - Turning Complete Revisited

