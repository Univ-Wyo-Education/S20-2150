MsgBuffer
	- Outputs can be produced and discarded
	- Inputs must be resovled and propogated (required) (pc_Ld) depends on Bus.x._data_ and Bus.x._used_
	0. Set nReqInput = 0
	1. Send a message to start
		- Creates messages in buffer for ouptuts from original
		- Microcode - generates more outputs ( some lead to pc_Ld as a input, 
			- pc_Ld - generats a callback function(closure) that will run when Bus.x._used_ is set
			  (nReqInput++)
	2. Complete of "tick" when no more required inputs left???
		(or done when set of outputs do not change?)


var proc = [];

IR Out
addProc ( "IR", "Out", "Bus", 44 );

PC Ld
addProc ( "PC", "In", "Bus", function( v ) {
	PC.x._InputBuffer_ = v;
	PC.x._data_ = PC.x._InputBuffer_;
	PC.Display( PC.x._data );
} )


Examle:
	1. Addr message -> Microcode
	2. Out message -> Microcode_PC
											pcoc [ 
												{ "MICROCODE", "In", func(){ See Step 3 }, "DepOn": "M_PC"/"Out" }
											,   { "M_PC", "Out", 0, "resoves": "MPC"/"out" }
											]

	3. Microcode -> Messages
		mar_Ld							
		pc_Out
		m_pc_Inc
											proc [
												{ "MICROCODE", "In", func(){ See Step 3 }"	DepOn: "M_PC"/"Out" }	// Resolved.
											,   { "M_PC", "Out", 0, "resoves": "MPC"/"out" }
											, 	{ "MAR", "In", func() {}, "DepOn": "Bus"/"data" }	
											,	{ "PC", "Out", 0, "resoves": "Bus"/"data" }	
											, 	{ "M_PC", "Act", func() { mpc = mpc + 1 } }
											]

	4. Loop

											proc [
												{ "MICROCODE", "In", func(){ See Step 3 }"	DepOn: "M_PC"/"Out" }	// Resolved.
											,   { "M_PC", "Out", 0, "resoves": "MPC"/"out" }
											, 	{ "MAR", "In", func() {}, "DepOn": "Bus"/"data" }		// Resolved.
											,	{ "PC", "Out", 3, "resoves": "Bus"/"data" }	
											,	{ "Bus", "I/O", 3, "resoves": "Bus"/"data" }	
											, 	{ "M_PC", "Act", func() { mpc = mpc + 1 } }				// Resolved.
											]

	5. Final State:
											proc [
											    { "M_PC", "Out", 0, "resoves": "MPC"/"out" }
											,	{ "PC", "Out", 0, "resoves": "Bus"/"data" }	
											,	{ "Bus", "I/O", 3, "resoves": "Bus"/"data" }	
											]





	"Chip":		PC, AC, MUX, Bus etc.
	"Status":	Done / Pending / Error
	"Act": 		Actions are: In | Out | I/O | Act
	"Resolves":	[ Names ]
	"DepOn": [ Names ]
	
		




0. LoadI at beginning not working - Not transferring MDR to MAR














0. Load Instruction - not working correct - 1014 (instruction) in AC (3rd CPU Instruction)











1. Add opeation (ALU) not working correctly
	1. Display ALU control liens with text out.
	2. Verify ALU operation
	3. Get the Add 1 to pointer to work
	4. Verify we are updating the pointer
	5. Stop over-writing the code with data.
Stuck at MPC = 80, PC = 0x0004, Store in program.
	- IR has a 0 in it - should be a 0x2xxx (Store)a
1. Issue: ran for a bit then address 5 got overwritten?
	MEMORY.x._data_[5].toString(16)
	Should be 0xd014, became 0x0014 - odd. 













(20min)
when 'hand_out' is on then id_hand_out shall be blue - to the tag hand_out
	To reproduce - step to the first 'hand_out' on, 4 steps, then
	add in the line - and show it.

(2hr)
Output Reg
	++3. Hook up 7-seg display - to "Output"


(2hr)
Buttons:

	(ip)
	Step Instruction - Step just 1 instruction.  Stop after.
		1. Put in a "Fetch-Stop" in PC? 	In Microcode? (Fetch Cycle) (In "Inc" in PC? ./js/pc_reg.js)
		Step1Instruction()












- Instruction 0x0 (JnS) probably broken.


(2hr)
	A listing from ./Asm/Asm that has addresses
	A listing from ../McAsm/McAsm that has addresses

(1hr)
	Display the MUX/colored-input-if-config input lines and where data is from as it is "turned" on.

(1hr)
	Show Memory - Modal for Address Range, then display values hex/dec/char for that set of addresses.

(2hr)
Input Reg
	4. Add Input modal / w/ Push-Button to Load


(1hr)
Output Box
	1. Output cleanup [ output box ]

Setup - Config Stuff 
	- Turn on "Dispaly" of Mux Input Lines as set.
		Lt Green if piced to be input
		Lt Mag if not piced but what is input
		Both Hex/Bin display





(15hrs)
	Logic Probe - show the logic probe - 	Modal for config of lines - then display??								Probably Hard





















































Test of Halt instruction and light:
	MEMORY.x._data_[1] = 0x7000
	Then run pgroam


--fixed--
2. The text for the Bus needs to move up by 5 to 10 px
2. Input/Ouptut only displaying 2 digits
3. Invalid data in output-turn on from Microcode
1. On 2nd new load of microcode - area hash not updated. 
	+- after dialog -
	+- Probably same for memory load
	Needs test.
		set mc_hash, mm_hash after fetch of new data, before conv. of text -> storage.
1. Read of Memory -> MDR caus 0Nan - in display of MDR, address in Microcode is "e9" - so beginning of execute after jmp.
	4 ticks into run of machine.
	> ClockRunner() * 4 times. e9 address is loaded at beginning of execute.
	MDR.x._data_ === undefined
	MAR.x._data_ is out of range, loaded with 0xd014 == 53268
+++1. Microcode at b0 is stuck - no address advance.
	MAR 1, MDR 6000
2. Getting "Output" instruction putting data in Input
Add an "output" line from Microcode that shows "IsHalted" -> A """LED""" output.
	Make a Red/Green LED output.
	Make a Red/Green LED - Error.  Use for the All zero microcode state.
(30min)
2. Catch Errors
	1. A microcode _data1_ === 0 && _data2_ === 0 should produce an ERROR! - No Output Turned On at Address X
	Make a Red/Green LED - Error.  Use for the All zero microcode state.
	Place LEDs / Switch On left of machine near PC
	(See ./led-0.html -has "PATH" for the display in it)
Would be nice to have a Fetch/Execute flag that is shown. (Similar to Halt)  LED
+++ (ip)
	Run - Jump to 0, start running.																				Easy
		- Clear flats that prevent run, do Reset op - let it go!

0. Display mem[MAR] HEX / DEC / Ch : +-4, and Disassembled Instruction at that point
	1. Need to display memory as it is used.
	1. Need to display code as it runs - to demo test of code.
(45min)
1. Need to display microcode + Address in Microcode
0. hand_out flag is not correct - not working - we get d014 on buss/MAR instead of 0014 from Load instruction at PC == 01 in program.
	(ip)
	+++Step Tick -- Stop after 1 microcode instruction until the next "step".
		+++1. Put in a "Fetch-Stop" input -> microcode. (Fetch Cycle) (In "Inc" in Microcode_PC in ./js/microcode_pc_reg.js)
		"ClockRunner()" - rename and make it Step1Tick()

(fixed)
0. MCM - labels not listed uniquely in list.
		// console.log ( "Called By", MAR.msg.caller );
